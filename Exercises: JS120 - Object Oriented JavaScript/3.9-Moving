// You have the following classes.

// class Person {
//  constructor(name) {
//     this.name = name;
//   }

//   gait() {
//     return "strolls";
//   }
// }

// class Cat {
//   constructor(name) {
//     this.name = name;
//   }

//   gait() {
//     return "saunters";
//   }
// }

// class Cheetah {
//   constructor(name) {
//     this.name = name;
//   }

//   gait() {
//     return "runs";
//   }
// }

// You need to modify the code. You are only allowed to write one new method 
// to do this.

// Solution:

const walkMixin = {
  walk() {
    return `${this.name} ${this.gait()} forward`;
  }

}

class Person {
  constructor(name) {
    this.name = name;
    Object.assign(this, walkMixin);
  }

  gait() {
    return "strolls";
  }
}

class Cat {
  constructor(name) {
    this.name = name;
    Object.assign(this, walkMixin);
  }

  gait() {
    return "saunters";
  }
}

class Cheetah {
  constructor(name) {
    this.name = name;
    Object.assign(this, walkMixin);
  }

  gait() {
    return "runs";
  }
}

let mike = new Person("Mike");
console.log(mike.walk());
// "Mike strolls forward"

let kitty = new Cat("Kitty");
console.log(kitty.walk());
// "Kitty saunters forward"

let flash = new Cheetah("Flash");
console.log(flash.walk());
// "Flash runs forward"

// Discussion:

// You can use the walkMixin with any class that defines properties gait and 
// name. You can also define a parent class and make the other classes inherit
// from that class.

// Mixins are more appropriate in a has-a relationship. While it is sometimes
// tricky to choose one or the other, a great guideline is to decide if you
// want some additional functionality, or if you want to extend the abilities
// of the class. In this case, it is pretty clear that we need the 
// functionality of walking; we don't need to extend the abilities of class
// Person (extending the abilities of a class coincides with an is-a 
// relationship, not has-a).