// In JavaScript, comparing two objects either with == or === checks for object 
// identity. In other words, the comparison evaluates as true if it's the 
// same object on either side of == or ===. This is a limitation, in a sense, 
// because sometimes we need to check if two objects have the same key/value 
// pairs. JavaScript doesn't give us a way to do that.

// Write a function objectsEqual that accepts two object arguments and returns 
// true or false depending on whether the objects have the same key/value 
// pairs.

// Solution:

function objectsEqual(obj1, obj2) {
  // Get keys of both objects
  const keys1 = Object.keys(obj1).sort();
  const keys2 = Object.keys(obj2).sort();

  // Check if the number of properties is the same
  if (keys1.length !== keys2.length) {
    return false;
  }

  for (let val in keys1) {
    if (keys1[val] !== keys2[val]) {
      return false;
    }
  }

  for (let prop in obj1) {
    if (obj1[prop] !== obj2[prop]) {
      return false;
    }
  }
  return true;
}

console.log(objectsEqual({a: 'foo'}, {a: 'foo'}));                      // true
console.log(objectsEqual({a: 'foo', b: 'bar'}, {a: 'foo'}));            // false
console.log(objectsEqual({a: 'foo', b: 'bar'}, {b: "bar", a: 'foo'}));  // true
console.log(objectsEqual({}, {}));                                      // true
console.log(objectsEqual({a: 'foo', b: undefined}, {a: 'foo', c: 1}));  // false

// Discussion:

// The solution checks whether the keys are the same and the values for the
// respective keys are the same.