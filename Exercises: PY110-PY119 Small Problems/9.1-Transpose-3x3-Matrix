# A 3x3 matrix can be represented by a list of nested lists: an outer list
# that contains three sub-lists that each contain three elements. For example,
# the 3x3 matrix shown below:

# 1  5  8
# 4  7  2
# 3  9  6

# is represented by the following list of lists:

matrix = [
    [1, 5, 8],
    [4, 7, 2],
    [3, 9, 6],
]

# The transpose of a 3x3 matrix is the matrix that results from exchanging
# the rows and columns of the original matrix. For example, the transposition
# of the matrix show above is:

# 1  4  3
# 5  7  9
# 8  2  6

# Write a function that takes a list of lists that represents a 3x3 matrix
# and returns the transpose of that matrix. You should implement the function
# on your own, without using any external libraries.

# Take care not to modify the original matrix -- your function must produce
# a new matrix and leave the input matrix list unchanged.

# Solution:

def transpose(matrix):

    m_m = len(matrix)       # No. of rows in matrix.
    m_n = len(matrix[0])    # No. of cols in matrix.
    t_m = m_n               # No. of rows in transpose.
    t_n = m_m               # No. of cols in transpose.

    transpose = []          # Initialise transpose matrix.

    for transpose_row in range(t_m):
        transpose.append([])                # Append m empty rows in transpose.
        for transpose_col in range(t_n):
            transpose[transpose_row].append(matrix[transpose_col][transpose_row])

    return transpose

# Examples:

matrix = [
    [1, 5, 8],
    [4, 7, 2],
    [3, 9, 6],
]

new_matrix = transpose(matrix)

print(new_matrix == [[1, 4, 3], [5, 7, 9], [8, 2, 6]]) # True
print(matrix == [[1, 5, 8], [4, 7, 2], [3, 9, 6]])     # True