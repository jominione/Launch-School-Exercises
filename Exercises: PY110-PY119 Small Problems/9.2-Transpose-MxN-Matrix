# In the previous exercise, you wrote a function that transposed a 3x3 matrix
# represented by a list of lists.

# Matrix transposes are not limited to 3x3 matrices, or even square matrices.
# Any matrix can be tranpossed simply by switching columns with rows.

# Modify your tranpose function from the previous exercise so that it works
# with any MxN matrix with at least one row and one column.

# Solution:

def transpose(matrix):

    m_m = len(matrix)       # No. of rows in matrix.
    m_n = len(matrix[0])    # No. of cols in matrix.
    t_m = m_n               # No. of rows in transpose.
    t_n = m_m               # No. of cols in transpose.

    transpose = []          # Initialise transpose matrix.

    for i in range(t_m):
        transpose.append([])                # Append m empty rows in transpose.
        for j in range(t_n):
            transpose[i].append(matrix[j][i])

    return transpose

# Examples:

# All of these examples should print True
print(transpose([[1, 2, 3, 4]]) == [[1], [2], [3], [4]])
print(transpose([[1], [2], [3], [4]]) == [[1, 2, 3, 4]])
print(transpose([[1]]) == [[1]])

matrix_3_by_5 = [
    [1, 2, 3, 4, 5],
    [4, 3, 2, 1, 0],
    [3, 7, 8, 6, 2],
]
expected_result = [
    [1, 4, 3],
    [2, 3, 7],
    [3, 2, 8],
    [4, 1, 6],
    [5, 0, 2],
]

print(transpose(matrix_3_by_5) == expected_result)