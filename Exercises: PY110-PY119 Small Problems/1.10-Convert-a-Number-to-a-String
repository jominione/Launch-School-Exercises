# In the previous two exercises, you developed functions that convert simple
# numeric strings to signed integers. In this exercise and the next, you're
# going to reverse those functions.

# Write a function that converts a non-negative integer value (e.g., 0, 1,
# 2, 3, and so on) to the string representation of that integer.

# You may not use any of the standard conversion functions available in Python,
# such as str. Your function should do this the old-fashioned way and construct
# the string by analysing and manipulating the number.

# Hint: The easiest way to approach this is to work through the digits of
# each number number, going from right to left. To extract each digit, you'll
# find the divmod function to be helpful.

# Solution:

def integer_to_string(num):
    if num == 0:
        return '0'
    
    result = ''
    while num > 0:
        num, digit = divmod(num, 10)
        char = chr(ord('0') + digit)
        result = char + result  # Prepend the character to result
    
    return result

# Examples:

print(integer_to_string(4321) == "4321")              # True
print(integer_to_string(0) == "0")                    # True
print(integer_to_string(5000) == "5000")              # True
print(integer_to_string(1234567890) == "1234567890")  # True