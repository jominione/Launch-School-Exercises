# Write a function that returns a list of all palindromic substrings of a
# string. That is, each substring must consist of a sequence of characters
# that reads the same forward and backward. The substrings in the returned
# list should be sorted by their order of appearence in the input string.
# Duplicate substrings should be included multiple times.

# You may (and should) use the substrings function you wrote in the previous
# exercise.

# For the purpose of this exercise, you should consider all characters and
# pay attention to case; that is, 'AbcbA' is a palindrome, but 'Abcba' and
# 'Abc-bA' are not. In addition, assume that single characters are not 
# palindromes.

# Solution:

def palindromes(text):

    def is_palindrome(substring):
        reverse_text = substring[::-1]
        return substring == reverse_text

    def substrings(text):

        def leading_substrings(string):
            substring_list = []
            for index in range(len(string)):
                substring_list.append(string[0:index+1])

            return substring_list

        result = []
        for index in range(len(text)):
            substring = text[index:len(text)]
            result += leading_substrings(substring)
            
        return result

    substrings_list = substrings(text)
    result = []
    
    for substring in substrings_list:
        if len(substring) > 1 and is_palindrome(substring):
            result.append(substring)
        
    return result


# Examples:

print(palindromes('abcd') == [])                  # True
print(palindromes('madam') == ['madam', 'ada'])   # True

print(palindromes('hello-madam-did-madam-goodbye') ==
                  [
                      'll', '-madam-', '-madam-did-madam-',
                      'madam', 'madam-did-madam', 'ada',
                      'adam-did-mada', 'dam-did-mad',
                      'am-did-ma', 'm-did-m', '-did-',
                      'did', '-madam-', 'madam', 'ada', 'oo',
                  ])    # True

print(palindromes('knitting cassettes') ==
                  [
                      'nittin', 'itti', 'tt', 'ss',
                      'settes', 'ette', 'tt',
                  ])    # True