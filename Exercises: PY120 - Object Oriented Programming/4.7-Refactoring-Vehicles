# Consider the following classes:

# class Car:
#     def __init__(self, make, model):
#         self.make = make
#         self.model = model

#     def get_wheels(self):
#         return 4

#     def info(self):
#         return f"{self.make} {self.model}"

# class Motorcycle:
#     def __init__(self, make, model):
#         self.make = make
#         self.model = model

#     def get_wheels(self):
#         return 2

#     def info(self):
#         return f"{self.make} {self.model}"

# class Truck:
#     def __init__(self, make, model, payload):
#         self.make = make
#         self.model = model
#         self.payload = payload

#     def get_wheels(self):
#         return 6

#     def info(self):
#         return f"{self.make} {self.model}"

# Refactor these classes so they all use a common superclass, and inherit
# behaviour as needed.

# Solution:

class Vehicle:
    def __init__(self, make, model, wheels):
        self._make = make
        self._model = model
        self._wheels = wheels

    def get_wheels(self):
        return self._wheels

    def info(self):
        return f"{self._make} {self._model}"

class Car(Vehicle):
    def __init__(self, make, model):
        super().__init__(make, model, 4)

    
class Motorcycle(Vehicle):
    def __init__(self, make, model):
        super().__init__(make, model, 2)

class Truck(Vehicle):
    def __init__(self, make, model, payload):
        super().__init__(make, model, 6)
        self._payload = payload

    @property
    def payload(self):
        return self._payload

# Examples:

truck = Truck("Toyota", "truckie", 100)
print(truck.info())
print(truck.get_wheels())
print(truck.payload)

car = Car("Tesla", "model-y")
print(car.info())
print(car.get_wheels())

motorcycle = Motorcycle("Yamaha", "fast")
print(motorcycle.info())
print(motorcycle.get_wheels())