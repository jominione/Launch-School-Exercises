# In the previous two exercises, you developed a Card class and a Deck class.
# You are now going to use those classes to create and evaluate poker hands.
# Create a class, Pokerhand, that takes 5 cards from a Deck of Cards and
# evaluates those cards as a poker hand.

# If you are unfamiliar with Poker, please see this description of various
# hand types. Since we won't actually be playing a game of Poker, it isn't
# necessary to know how to play.

# You should build your class using the following code skeleton:

# Include Card and Deck classes from the last two exercises.

# class PokerHand:
#     def __init__(self, deck):
#         pass

#     def print(self):
#        pass

#     def evaluate(self):
#         if self._is_royal_flush():
#             return "Royal flush"
#         elif self._is_straight_flush():
#             return "Straight flush"
#         elif self._is_four_of_a_kind():
#             return "Four of a kind"
#         elif self._is_full_house():
#             return "Full house"
#         elif self._is_flush():
#             return "Flush"
#         elif self._is_straight():
#             return "Straight"
#         elif self._is_three_of_a_kind():
#             return "Three of a kind"
#         elif self._is_two_pair():
#             return "Two pair"
#         elif self._is_pair():
#             return "Pair"
#         else:
#           return "High card"

#     def _is_royal_flush(self):
#         pass

#     def _is_straight_flush(self):
#         pass

#     def _is_four_of_a_kind(self):
#         pass

#     def _is_full_house(self):
#         pass

#     def _is_flush(self):
#         pass

#     def _is_straight(self):
#         pass

#     def _is_three_of_a_kind(self):
#         pass

#     def _is_two_pair(self):
#         pass

#     def _is_pair(self):
#         pass

# Some variants of Poker allow both Ace-high (A, K, Q, J, 10) and Ace-low
# (A, 2, 3, 4, 5) straights. For simplicity, your code only needs to recognise
# Ace-high straights.

# Solution:

import random

class Card:

    RANKS = list(range(2, 11)) + ['Jack', 'Queen', 'King', 'Ace']

    def __init__(self, rank, suit):
        self._rank = rank
        self._suit = suit

    @property
    def rank(self):
        return self._rank

    @property
    def suit(self):
        return self._suit

    def __str__(self):
        return f"{self.rank} of {self.suit}"

    def __lt__(self, other):
        return (Card.RANKS.index(self.rank) < 
                Card.RANKS.index(other.rank))

    def __eq__(self, other):
        return self.rank == other.rank

class Deck(Card):
    RANKS = list(range(2, 11)) + ['Jack', 'Queen', 'King', 'Ace']
    SUITS = ['Hearts', 'Clubs', 'Diamonds', 'Spades']

    def __init__(self):
        self._deck = []
        self._shuffle()

    def _shuffle(self):

        for rank in Deck.RANKS:
            for suit in Deck.SUITS:
               self._deck.append(Card(rank, suit))
        random.shuffle(self._deck)

    def draw(self):

        if self._deck:
            card = self._deck.pop()
            return card
        else:
            self._shuffle()
            card = self._deck.pop()
            return card

class PokerHand(Deck):
    def __init__(self, deck):
        self._hand = self._dealer(deck)
        self._rank_set = set([card.rank for card in self.hand])
        self._suit_set = set([card.suit for card in self.hand])
        self._rank_counter = self._rank_counter()
        self._suit_counter = self._suit_counter()
            
    @property
    def hand(self):
        return self._hand

    @property
    def rank_counter(self):
        return self._rank_counter

    @property
    def suit_counter(self):
        return self._suit_counter

    @property
    def rank_set(self):
        return self._rank_set

    @property
    def suit_set(self):
        return self._suit_set

    def _dealer(self, deck):
        hand = [deck.draw() for _ in range(5)]
        return hand

    def _rank_counter(self):
        rank_counter = []
        for rank in self.rank_set:
            counter = 0
            for card_rank in [card.rank for card in self.hand]:
                if card_rank == rank:
                    counter += 1
            rank_counter.append(counter)
        return rank_counter

    def _suit_counter(self):
        suit_counter = []
        for suit in self.suit_set:
            counter = 0
            for card_suit in [card.suit for card in self.hand]:
                if card_suit == suit:
                    counter += 1
            suit_counter.append(counter)
        return suit_counter

    def print(self):
        for card in self.hand:
            print(str(card))

    def evaluate(self):
        if self._is_royal_flush():
            return "Royal flush"
        elif self._is_straight_flush():
            return "Straight flush"
        elif self._is_four_of_a_kind():
            return "Four of a kind"
        elif self._is_full_house():
            return "Full house"
        elif self._is_flush():
            return "Flush"
        elif self._is_straight():
            return "Straight"
        elif self._is_three_of_a_kind():
            return "Three of a kind"
        elif self._is_two_pair():
            return "Two pair"
        elif self._is_pair():
            return "Pair"
        else:
          return "High card"

    def _is_royal_flush(self):
        if self._is_flush() and self._is_straight() and 'Ace' in self.rank_set:
            return True

    def _is_straight_flush(self):
        if self._is_flush() and self._is_straight():
            return True

    def _is_four_of_a_kind(self):
        if 4 in self.rank_counter:
            return True

    def _is_full_house(self):
        if (2 in self.rank_counter) and (3 in self.rank_counter):
            return True

    def _is_flush(self):
        if 5 in self.suit_counter:
            return True

    def _is_straight(self):
        sorted_ranks = sorted([Deck.RANKS.index(card.rank) for card in self.hand])
        return sorted_ranks == list(range(sorted_ranks[0], sorted_ranks[0] + 5))

    def _is_three_of_a_kind(self):
        if 3 in self.rank_counter:
            return True

    def _is_two_pair(self):
        if (2 in self.rank_counter) and (len(self.rank_set) == 3):
            return True

    def _is_pair(self):
        if len(self.rank_set) == 4:
            return True

# Examples:

hand = PokerHand(Deck())
hand.print()
print(hand.evaluate())
print()

# 5 of Clubs
# 7 of Diamonds
# Ace of Hearts
# 7 of Clubs
# 5 of Spades
# Two pair

# The exact cards and the type of hand for the first test will vary with each
# run, so don't expect the same output we show for the first 6 lines.

# Adding TestDeck class for testing purposes

class TestDeck(Deck):
    def __init__(self, cards):
        self._deck = cards

# All of these tests should return True

hand = PokerHand(
    TestDeck(
        [
            Card("Ace", "Hearts"),
            Card("Queen", "Hearts"),
            Card("King", "Hearts"),
            Card("Jack", "Hearts"),
            Card(10, "Hearts"),
        ]
    )
)
print(hand.evaluate() == "Royal flush")

hand = PokerHand(
    TestDeck(
        [
            Card(8, "Clubs"),
            Card(9, "Clubs"),
            Card("Queen", "Clubs"),
            Card(10, "Clubs"),
            Card("Jack", "Clubs"),
        ]
    )
)
print(hand.evaluate() == "Straight flush")

hand = PokerHand(
    TestDeck(
        [
            Card(3, "Hearts"),
            Card(3, "Clubs"),
            Card(5, "Diamonds"),
            Card(3, "Spades"),
            Card(3, "Diamonds"),
        ]
    )
)
print(hand.evaluate() == "Four of a kind")

hand = PokerHand(
    TestDeck(
        [
            Card(3, "Hearts"),
            Card(3, "Clubs"),
            Card(5, "Diamonds"),
            Card(3, "Spades"),
            Card(5, "Hearts"),
        ]
    )
)
print(hand.evaluate() == "Full house")

hand = PokerHand(
    TestDeck(
        [
            Card(10, "Hearts"),
            Card("Ace", "Hearts"),
            Card(2, "Hearts"),
            Card("King", "Hearts"),
            Card(3, "Hearts"),
        ]
    )
)
print(hand.evaluate() == "Flush")

hand = PokerHand(
    TestDeck(
        [
            Card(8, "Clubs"),
            Card(9, "Diamonds"),
            Card(10, "Clubs"),
            Card(7, "Hearts"),
            Card("Jack", "Clubs"),
        ]
    )
)
print(hand.evaluate() == "Straight")

hand = PokerHand(
    TestDeck(
        [
            Card("Queen", "Clubs"),
            Card("King", "Diamonds"),
            Card(10, "Clubs"),
            Card("Ace", "Hearts"),
            Card("Jack", "Clubs"),
        ]
    )
)
print(hand.evaluate() == "Straight")

hand = PokerHand(
    TestDeck(
        [
            Card(3, "Hearts"),
            Card(3, "Clubs"),
            Card(5, "Diamonds"),
            Card(3, "Spades"),
            Card(6, "Diamonds"),
        ]
    )
)
print(hand.evaluate() == "Three of a kind")

hand = PokerHand(
    TestDeck(
        [
            Card(9, "Hearts"),
            Card(9, "Clubs"),
            Card(5, "Diamonds"),
            Card(8, "Spades"),
            Card(5, "Hearts"),
        ]
    )
)
print(hand.evaluate() == "Two pair")

hand = PokerHand(
    TestDeck(
        [
            Card(2, "Hearts"),
            Card(9, "Clubs"),
            Card(5, "Diamonds"),
            Card(9, "Spades"),
            Card(3, "Diamonds"),
        ]
    )
)
print(hand.evaluate() == "Pair")

hand = PokerHand(
    TestDeck(
        [
            Card(2, "Hearts"),
            Card("King", "Clubs"),
            Card(5, "Diamonds"),
            Card(9, "Spades"),
            Card(3, "Diamonds"),
        ]
    )
)
print(hand.evaluate() == "High card")