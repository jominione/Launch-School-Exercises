# Using the Card class from the previous exercise, create a Deck class that
# contains all of the standard 52 playing cards.

# The Deck class should provide a draw method to deal one card. The Deck
# should be shuffled when it is initalised. If no more cards remain when draw
# is called, the method should generate a new set of 52 shuffled cards, then
# deal one card from the new cards.

# Note that the last line should almost always print "True"; if you shuffle
# the deck 1000 times a second, you will be very, very, very old before you
# see two consecutive shuffles produce the same results. If you get "False"
# result, you almost certainly have something wrong.

# Solution:

import random

class Card:

    RANKS = list(range(2, 11)) + ['Jack', 'Queen', 'King', 'Ace']

    def __init__(self, rank, suit):
        self._rank = rank
        self._suit = suit

    @property
    def rank(self):
        return self._rank

    @property
    def suit(self):
        return self._suit

    def __str__(self):
        return f"{self.rank} of {self.suit}"

    def __lt__(self, other):
        return (Card.RANKS.index(self.rank) < 
                Card.RANKS.index(other.rank))

    def __eq__(self, other):
        return self.rank == other.rank

class Deck(Card):
    RANKS = list(range(2, 11)) + ['Jack', 'Queen', 'King', 'Ace']
    SUITS = ['Hearts', 'Clubs', 'Diamonds', 'Spades']

    def __init__(self):
        self._deck = []
        self._shuffle()

    def _shuffle(self):

        for rank in Deck.RANKS:
            for suit in Deck.SUITS:
               self._deck.append(Card(rank, suit))
        random.shuffle(self._deck)

    def draw(self):

        if self._deck:
            card = self._deck.pop()
            return card
        else:
            self._shuffle()
            card = self._deck.pop()
            return card
            
# Examples:

deck = Deck()
drawn = []
for _ in range(52):
    drawn.append(deck.draw())

count_rank_5 = sum([1 for card in drawn if card.rank == 5])
count_hearts = sum([1 for card in drawn if card.suit == 'Hearts'])

print(count_rank_5 == 4)      # True
print(count_hearts == 13)     # True

drawn2 = []
for _ in range(52):
    drawn2.append(deck.draw())

print([str(card) for card in drawn2])
print(drawn != drawn2)        # True (Almost always).