// A collection of spelling blocks has two letters per block, as shown in 
// this list:

// B:O   X:K   D:Q   C:P   N:A
// G:T   R:E   F:S   J:W   H:U
// V:I   L:Y   Z:M

// This limits the words you can spell with the blocks to only those words 
// that do not use both letters from any given block. You can also only use 
// each block once.

// Write a function that takes a word string as an argument and returns true 
// if the word can be spelled using the set of blocks, false otherwise. You 
// can consider the letters to be case-insensitive when you apply the rules.

// Examples:
console.log(isBlockWord('BATCH'));      // true
console.log(isBlockWord('BUTCH'));      // false
console.log(isBlockWord('jest'));       // true
console.log(isBlockWord('floW'));       // true
console.log(isBlockWord('APPLE'));      // false
console.log(isBlockWord('apple'));      // false
console.log(isBlockWord('apPLE'));      // false
console.log(isBlockWord('Box'));        // false

// Solution:

function isBlockWord(text) {
  let blocks = [['B', 'O'], ['X', 'K'], ['D', 'Q'], ['C', 'P'], ['N', 'A'], 
                ['G', 'T'], ['R', 'E'], ['F', 'S'], ['J', 'W'], ['H', 'U'], 
                ['V', 'I'], ['L', 'Y'], ['Z', 'M']];
                
  let usedBlocks = new Set();  // Set to track used blocks
  
  // Convert text to uppercase
  text = text.toUpperCase();
  
  for (let letter of text) {
    let foundBlock = false;

    // Check each block
    for (let block of blocks) {
      if (block.includes(letter)) {
        // Check if the block is already used
        if (usedBlocks.has(block[0]) || usedBlocks.has(block[1])) {
          return false;
        }
        usedBlocks.add(block[0]);
        usedBlocks.add(block[1]);
        foundBlock = true;
        break;
      }
    }

    // If no valid block was found, return false
    if (!foundBlock) {
      return false;
    }
  }

  return true;  // All letters were valid
}