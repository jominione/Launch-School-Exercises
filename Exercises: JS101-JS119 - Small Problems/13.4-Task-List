// We were asked to implement a task list and the following functionality:

// * adding a new task
// * completing a given number of existing tasks
// * displaying the task list

// * We decided to keep things simple and model the tasks as strings. 
//   Completing a task for us simply means deleting the string from the array 
//   of tasks.

// Experimenting with our code reveals that it doesn't work exactly as we 
// expected. Find the problem and fix it.

let todos = ['wash car', 'exercise', 'buy groceries', 'balance budget',
             'call plumber', 'feed fido', 'get gas',  'organize closet'];

function addTask(task) {
  if (todos.includes(task)) {
    console.log('That task is already on the list.');
  } else {
    todos.push(task);
  }
}

function completeTasks(n = 1) {
  let tasksComplete = 0;

  while (todos.length > 0 && tasksComplete < n) {
    console.log(`${todos[0]} complete!`);
    todos.shift();
//    delete todos[0];
    tasksComplete++;
  }

  if (todos.length === 0) {
    console.log('All tasks complete!');
  } else {
    console.log(`${tasksComplete} tasks completed; ${todos.length} remaining.`);
  }
}

function displayTaskList() {

  console.log(`ToDo list (${todos.length} tasks):`);
  console.log('---------------------');

  for (let idx = 0; idx < todos.length; idx++) {
    console.log(`-- ${todos[idx]}`);
  }
}

// Utilizing our task manager

addTask('oil change');
addTask('dentist');
addTask('homework');

completeTasks(3);
displayTaskList();

// Solution:

// When you run the program completeTasks function is supposed to delete a 
// completed task from the todos array using delete operator. However, it is 
// important to note that delete does not actually remove an element from 
// an array or shift the remaining elements. Instead, it leaves a 
// undefined hole in the array where the element used to be.

// Instead of using delete to remove the first element of an element use splice
// or shift instead.

// Discussion:

// Recall that arrays are objects. The delete operator is used to remove a 
// property from an object. When delete is used to remove an array element, 
// an empty slot remains in its place in the array. The length of the array 
// remains the same, and using bracket notation with the deleted item's index 
// will return undefined. Using delete with an array can therefore lead to 
// unexpected results and should generally be avoided.

// The Array.prototype.shift() method provides the behavior appropriate for 
// our code. It removes the first element of an array, shifts the values at 
// consecutive indexes down, and updates the length of the array.

// Another very useful method for deleting array elements is 
// Array.prototype.splice().