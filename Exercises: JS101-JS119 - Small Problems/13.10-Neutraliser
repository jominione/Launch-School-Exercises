// We wrote a neutralize function that removes negative words from sentences. 
// However, it fails to remove all of them. What does happen? How would you 
// fix this problem?

// Solution:

// The problem arises when you remove a word from the word array using slice.
// Because two negative words were next to each other in the array, when the 
// function removed the first negative word it changed the index of the array
// so that it skipped the next element and moved on to the element after the
// second negative word.

// To rectify, instead of mutating words array by removing negative words 
// create a new array of words that exclude the negative words by using push
// method.

function neutralize(sentence) {
  let words = sentence.split(" ");
  let result = [];
  words.forEach(word => {
 //    if (isNegative(word)) {
 //      const index = words.indexOf(word);
 //      words.splice(index, 1);
    if (!isNegative(word)) {
      result.push(word);
    }
  });
//   return words.join(" ");
  return result.join(" ");
};

function isNegative(word) {
  return ["dull", "boring", "annoying", "chaotic"].includes(word);
}

console.log(
  neutralize("These dull boring cards are part of a chaotic board game.")
);

// Discussion:

// The code prints These boring cards are part of a board game. when we should 
// see These cards are part of a board game. instead. This is because the 
// splice operation on line 7 mutates the words array in the middle of the 
// iteration. This mutation causes boring to be skipped.

// At index 0, nothing interesting happens. When the iteration is at index 1, 
// the element is "dull". Since it counts as negative, it is deleted from 
// the array. As a consequence, each subsequent word is shifted one position 
// to the left. In particular, the word that was previously at position 2, 
// "boring", is now at position 1. So in the next step, when the iteration 
// is at index 2, it finds "cards". Our mutation of the array caused it to 
// skip "boring".

// Alternative Solution:

function neutralize(sentence) {
  let words = sentence.split(" ");

  return words.filter(word => !isNegative(word)).join(" ");
};

function isNegative(word) {
  return  ["dull", "boring", "annoying", "chaotic"].includes(word);
}

console.log(
  neutralize("These dull boring cards are part of a chaotic board game.")
);

// To fix the bug we have used Array.prototype.filter() method. If the callback 
// function returns true, the element is added in the new array, otherwise 
// it is not. For that reason, since isNegative(word) will return false if 
// the word is not negative we use bang prefix ! to convert that to true. 
// Finally, we chain join(" ") method and return the final string from the 
// function.

// While iterating over an array, avoid mutating it from within the block. 
// Instead you can use the Array methods filter.