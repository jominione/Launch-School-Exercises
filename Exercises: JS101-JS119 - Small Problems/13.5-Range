// We are assigned the task to implement a range function that returns an 
// array of integers beginning and ending with specified start and end numbers. 
// When only a single argument is provided, that argument should be used as 
// the ending number and the starting number should be 0.

// Check our code below. Why do the example invocations fail with an error 
// saying Maximum call stack size exceeded? Can you fix the code, so it runs 
// without error and satisfies the requirements?

// function range(start, end = -1) {

// Solution: 

// The program defines two functions with the same name 'range',
// which will result in a function naming conflict. The last function will
// overwrite the previous one. Since the second range returns range as a 
// function expression, this will cause recursion infinitely resulting in 
// stack overflow i.e. calling recursive function calls that excell the call
// stack limit set by the JavaScript engine.

// Secondly, the function range is defined with an optional end parameter with default 
// argument of -1 which will result in return of empty array when range invoked
// with single argument because the for loop condition of range will not be
// met.



// function range(start, end = -1) {
//   let range = [];

//   for (let element = start; element <= end; element++) {
//     range.push(element);
//   }

//   return range;
// }

// function range(end) {
//   return range(0, end);
// }

function range(start, end = -1) {
  let range = [];
  if (end === -1) {
    end = start;
    start = 0;
  }
  for (let element = start; element <= end; element++) {
      range.push(element);
  }
  return range;
}


// Examples:

console.log(range(10, 20));
console.log(range(5));

// Discussion:

// In our original code, we have defined two range functions. One function 
// signature expects two arguments, and one expects only a single argument. 
// But JavaScript does not support function overloading (the ability to utilize 
// multiple functions of the same name with different signatures). So with 
// the second definition of range, the first one is overridden. That is, it 
// is always range(end) on lines 11-13 that is executed, no matter how many 
// arguments you provide. So when we call range(10, 20) on line 17, the 
// parameter end is assigned to 10, and the second argument, 20, is ignored. 
// The function then executes its body, line 12, calling itself again, this 
// time with two arguments, 0 and 10. Since our program only recognizes the 
// range function on lines 11-13, the function will continue to call itself 
// repeatedly until the stack size is exceeded.