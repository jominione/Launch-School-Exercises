// In the previous exercise, you developed a function that converts simple 
// numeric strings to integers. In this exercise, you're going to extend that 
// function to work with signed numbers.

// Write a function that takes a string of digits and returns the appropriate 
// number as an integer. The string may have a leading + or - sign; if the 
// first character is a +, your function should return a positive number; 
// if it is a -, your function should return a negative number. If there is 
// no sign, return a positive number.

// You may assume the string will always contain a valid number.

// You may not use any of the standard conversion methods available in 
// JavaScript, such as parseInt() and Number(). You may, however, use the 
// stringToInteger() function from the previous lesson.

// Examples:

console.log(stringToSignedInteger("4321") === 4321); // logs true
console.log(stringToSignedInteger("-570") === -570); // logs true
console.log(stringToSignedInteger("+100") === 100); // logs true

function stringToSignedInteger(string) {
  let number = 0;
  let startIndex = 0;

  // Check if the first character indicates a sign
  if ((string[0] === '-') || (string[0] === '+')) {
    startIndex = 1;
  }
  // Convert the rest of the string to a number
  for (let i = startIndex; i < string.length; i++) {
    let char = string[i];
    number = number * 10 + (char - '0');
  }

  // Apply the sign if necessary
  if (string[0] === '-') {
    number = -number;
  }

  return number;
}