// You have a bank of switches before you, numbered from 1 to count. Every 
// switch is connected to exactly one light that is initially off. You walk 
// down the row of switches and toggle every one of them, that is, you flip 
// every switch. All the lights are now on. You walk back to the beginning 
// of the row and start another pass. On this second pass, you toggle switches 
// 2, 4, 6, and so on. Now, every other light is on. On the third pass, you 
// go back to the beginning again, this time toggling switches 3, 6, 9, and 
// so on. You continue to repeat this process until you have made count passes.

// Write a program that takes one argument—the total number of switches—and 
// returns an array of the lights that are on after count passes.

// Understanding the Problem

// To better understand the problem, let's break it down into the following 
// components:

// * Input

//   * The last sentence from the problem description makes it clear that 
//     there is only one input: the number of switches. The end of this 
//     sentence is not as straightforward however, because the phrase—"count 
//     repetitions"—begs the question, "what is count?" If we read through 
//     the problem description again, the first sentence tells us that every 
//     switch has a number from 1 to count. We can therefore infer that the 
//     number of repetitions is equal to the number of switches.

// * Output
//   * An array of the lights that are turned on after toggling the 
//     appropriate switches count number of times.


// * Rules
//   * All the lights are initially turned off.
//   * The first switch in the bank of switches is switch #1. There is no switch 
//     #0.
//   * For the nth round, every switch that is a multiple of nth gets toggled. 
//     For example, in the first round, all the switches get toggled because all 
//     integers are multiples of 1. In the second round, only the switches 
//     that are multiples of 2 get toggled.
//   * The number of switches dictates the number of rounds. For instance, 
//    if there are 10 switches then there will be 10 rounds of toggling.
//   * Return an array containing the switch numbers of the lights that are 
//     on after all the rounds have been completed.

// Data Structure and Algorithm

// We're going to solve this problem using a simulation. We'll have our program 
// go through the count rounds of toggling, while keeping track of the states 
// of the lights. At the end, we'll determine what lights are on and return 
// a list of their positions in the bank.

// For our data structure, we'll use an array to track the states of the 
// lights. Since each light has two possible states, it's natural to use 
// the boolean values of true and false to represent whether a light is on 
// or off. This has the added benefit of letting use the ! unary operator 
// to easily toggle a light's state.

// Since the lights are numbered starting from 1, one approach we can consider 
// is to have our array indices also start from 1. In other words, leave the 
// 0 index as undefined and avoid using it, and treat the element at index 
// 1 as the first element of the array.

// We don't use this approach in our solution because it's not very compatible 
// with our algorithm. For example, it makes it harder to use the list 
// processing methods of Array. However, this does not mean that this approach 
// won't work well with your solution. Depending on the direction you decide 
// to take, it's definitely worth thinking about.

// Algorithm:

// * Loop through the rounds from 1 to count, and for each round:
//   * If the current round is nth, toggle the lights whose indices are 
//     multiples of nth.
//   * Use map to return a new array to represent the new states.

// * Filter/map the lights array to return a new array containing the indices 
//   of the lights that are on.


// Examples:

console.log(lightsOn(5));        // [1, 4]
// Detailed result of each round for `5` lights
// Round 1: all lights are on
// Round 2: lights 2 and 4 are now off;     1, 3, and 5 are on
// Round 3: lights 2, 3, and 4 are now off; 1 and 5 are on
// Round 4: lights 2 and 3 are now off;     1, 4, and 5 are on
// Round 5: lights 2, 3, and 5 are now off; 1 and 4 are on

console.log(lightsOn(100));      // [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

// Solution:

function lightsOn(switches) {

  let count = 1;
  let lights = [];

  while (count <= switches) {
    for (let i = count; i <= switches; i += count) {
      if (!lights[i-1]){
        lights[i-1] = true;
      } else {
        lights[i-1] = false;
      }
    }
    count++;
  }

  let result = [];
  for (let i = 0; i < switches; i++) {
    if (lights[i] === true) {
      result.push(i + 1);
    }
  }
  return result;
}