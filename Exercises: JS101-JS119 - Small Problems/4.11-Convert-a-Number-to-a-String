// In the previous two exercises, you developed functions that convert simple 
// numeric strings to signed integers. In this exercise and the next, you're 
// going to reverse those functions.

// Write a function that converts a non-negative integer value (e.g., 0, 1, 
// 2, 3, and so on) to the string representation of that integer.

// You may not use any of the standard conversion functions available in 
// JavaScript, such as String(), Number.prototype.toString, or an expression 
// such as '' + number. Your function should do this the old-fashioned way 
// and construct the string by analyzing and manipulating the number.

// Examples:

console.log(integerToString(4321));        // "4321"
console.log(integerToString(0));           // "0"
console.log(integerToString(5000));        // "5000"
console.log(integerToString(1234567890));  // "1234567890"

// Solution:

function integerToString(num) {
  if (num === 0) return '0';

  let digits = [];
  let isNegative = false;

  // Handle negative numbers
  if (num < 0) {
    isNegative = true;
    num = -num;
  }

  // Extract digits
  while (num > 0) {
    let digit = num % 10;
    digits.push(String.fromCharCode(digit + 48)); // Convert digit to character
    num = Math.floor(num / 10);
  }

  // Append negative sign if necessary
  if (isNegative) {
    digits.push('-');
  }

  // Reverse the digits array to get the correct order
  let str = '';
  for (let i = digits.length - 1; i >= 0; i--) {
    str += digits[i];
  }

  return str;
}