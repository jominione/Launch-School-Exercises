// In this exercise, you will implement your own versions of the 
// Array.prototype.slice and Array.prototype.splice methods according to the 
// following specifications.

// The slice function takes three arguments: an array, and two integers 
// representing a begin and an end index. The function returns a new array 
// containing the extracted elements starting from begin up to but not 
// including end. slice does not mutate the original array.

// The splice function changes the contents of an array by deleting existing 
// elements and/or adding new elements. The function takes the following 
// arguments: an array, a start index, a deleteCount, and zero or more elements 
// to be added. The function removes deleteCount number of elements from the 
// array, beginning at the start index. If any optional element arguments 
// are provided, splice inserts them into the array beginning at the start 
// index. The function returns a new array containing the deleted elements, 
// or an empty array ([]) if no elements are deleted. splice mutates the 
// original array.

// Additional specifications:

// slice:

// * The values of begin and end will always be integers greater than or equal 
//   to 0.
// * If the value of begin or end is greater than the length of the array, 
//   set it to equal the length.

// splice:

// * The values of start and deleteCount will always be integers greater than 
//   or equal to 0.
// * If the value of start is greater than the length of the array, set it 
//   to equal the length.
// * If the value of deleteCount is greater than the number of elements from 
//   start up to the end of the array, set deleteCount to the difference 
//   between the array's length and start.
// * Takes optional arguments for elements to add to the array; denoted by 
//   the rest parameter ...args. If no elements to add are provided, splice 
//   only removes elements from the array.

// Solution:

function slice(array, begin, end) {
  let result = [];
  if (begin > array.length) {
    begin = array.length;
  }
  if (end > array.length) {
    end = array.length;
  }

  for (let i = begin; i < end; i++) {
    result[i-begin] = array[i];
  }

  return result;
}

console.log(slice([1, 2, 3], 1, 2));               // [2]
console.log(slice([1, 2, 3], 2, 0));               // []
console.log(slice([1, 2, 3], 5, 1));               // []
console.log(slice([1, 2, 3], 0, 5));               // [1, 2, 3]

const arr1 = [1, 2, 3];
console.log(slice(arr1, 1, 3));                     // [2, 3]
console.log(arr1);                                  // [1, 2, 3]

function splice(array, start, deleteCount, ...args) {

  if (start > array.length) {
    start = array.length;
  }

  if (deleteCount > array.length - start) {
    deleteCount = array.length - start;
  }
  
  let arrayCopy = slice(array, 0, array.length);      
  // Create a 'cache' of original array as template to 'repopulate' original 
  // object reference i.e. reference of 'array' with remaining values + 
  // additional values from ...args.
  
  let argsAdd = args.length;
  // Number of values to add to array.

  let newLength = array.length + argsAdd - deleteCount
  // New length of array is no. of original values to delete and new values to
  // add.
  
  array.length = newLength;                           
  // Adjust length of array (without changing object reference).

  for (let i = 0; i < argsAdd; i++) {
    array[start + i] = args[i];
  }
  // Adding new values into original array from start index.

  let countRemainingVal = arrayCopy.length - (start + deleteCount);
  // Number of values remaining after deleteCount number of elements from
  // the original array.

  for (let i = 0; i < countRemainingVal; i++) {
    array[start + argsAdd + i] = arrayCopy[start + deleteCount + i];
  }
  // Inserting back into original array the values of array that are remaining
  // after delete and shifted by any values that are added.

  return slice(arrayCopy, start, start + deleteCount);
}

console.log(splice([1, 2, 3], 1, 2));              // [2, 3]
console.log(splice([1, 2, 3], 1, 3));              // [2, 3]
console.log(splice([1, 2, 3], 1, 0));              // []
console.log(splice([1, 2, 3], 0, 1));              // [1]
console.log(splice([1, 2, 3], 1, 0, 'a'));         // []

const arr2 = [1, 2, 3];
console.log(splice(arr2, 1, 1, 'two'));             // [2]
console.log(arr2);                                  // [1, "two", 3]

const arr3 = [1, 2, 3];
console.log(splice(arr3, 1, 2, 'two', 'three'));    // [2, 3]
console.log(arr3);                                  // [1, "two", "three"]

const arr4 = [1, 2, 3];
console.log(splice(arr4, 1, 0));                    // []
console.log(splice(arr4, 1, 0, 'a'));               // []
console.log(arr4);                                  // [1, "a", 2, 3]

const arr5 = [1, 2, 3];
console.log(splice(arr5, 0, 0, 'a'));               // []
console.log(arr5);                                  // ["a", 1, 2, 3]