// What will the following code snippets log?

// Solution:

// The key thing to note about function declarations is that, like variable
// declarations, they result in the creation of a variable. A function 
// declaration creates a variable with the same name as the function name.

// Hoisting works differently depending on the type of declaration. With
// function declarations, both the function name and body are hoisted, whereas,
// with variable declarations, only the variable name is hoisted but not the
// assignment.

// Finally, although function and variable declarations are both hoisted,
// function declarations are hoisted first; any succeeding variable
// declarations with the same name (e.g. counter) are seen as duplicates.
// With var declarations these duplicates are ignored, but with let (and const)
// declarations you can't declare a variable multiple times when one or more
// of those declarations use let or const. Will raise a SyntaxError when
// JavaScript reaches the second declaration of the variable before execution.

// Code snippet 1

var counter = 5;
var rate = 3;
console.log('The total value is ' + String(counter * rate));  

function counter(count) {
  // ...
}

// Code snippet 1 after Hoisting

function counter(count) {
  // ...
}

var rate;

counter = 5;
rate = 3;

console.log('The total value is ' + String(counter * rate));  
// logs: The total value is 15

// Code snippet 2

function counter(count) {
  // ...
}

console.log('The total value is ' + String(counter * rate));

var counter = 5;
var rate = 3;

// Code snippet 2 after Hoisting

function counter(count) {
  // ...
}

var rate;

counter = 5;
rate = 3;

console.log('The total value is ' + String(counter * rate));
// logs: The total value is 15

// Code snippet 3

var counter = 5;
var rate = 3;

function counter(count) {
  // ...
}

console.log('The total value is ' + String(counter * rate));

// Code snippet 3 after Hoisting

function counter(count) {
  // ...
}

var rate;

counter = 5;
rate = 3;

console.log('The total value is ' + String(counter * rate));  
// logs: The total value is 15

// Code snippet 4

let counter = 5;
let rate = 3;

function counter(count) {
  // ...
}

console.log('The total value is ' + String(counter * rate));

// Code snippet 4 after Hoisting

// Will raise Syntax error before during parsing before compilation and code
// will not be executed.

// Discussion:

// After hoisting the first and third code snippets are effectively the same.
// Notice also, that in teh first three code snippets, the variable declaration
// for counter is effectively oveerwritten by the function declaration with
// the same name.

// The differentiating factor for the second code snippet is the position
// of the call to console.log relative tot he variable assignments; since
// the assignments happen after the console.log call, the expression counter
// * rate evaluates to NaN.

// You can't declare a variable multiple times when one or more of those 
// declarations use let or const. Since snippet 4 declares counter using let,
// it raises a SyntaxError. However, the error occus on line 4 -- the function
// declaration -- from the original code. The process of code execution starts
// with parsing (JavaScript engine checks for SyntaxError), then compilation
// (engine hoists variable and function declarations before execution), and
// finally once the code is compiled and ready, the JavaScript engine begins 
// executing the code line by line. If there are any runtime errors (such 
// as trying to access an undefined variable or calling a non-existent 
// function), these will occur during this phase after the initial parsing 
// and compilation have successfully completed.

// Since the SyntaxError occurs during the creation phase, hoisting has no
// direct effect on the behaviour. The syntax error will occur before hoisting
// takes place.