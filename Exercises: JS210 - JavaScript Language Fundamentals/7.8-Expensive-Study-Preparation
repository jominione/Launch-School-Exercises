// We make a few purchases to prepare for our study session, but the amount 
// charged upon checkout seems too high. Run the following code and find out 
// why we are charged incorrectly.

// If you're unsure why the amount billed is incorrect, log shoppingCart to 
// the console from inside the checkout function. Do you see what you expect?

// Solution:

// The shopping cart is a list of items, where each item
// is an object { name: <string>, amount: <number> }.
let shoppingCart = [];

// Currently available products with prices.
const prices = {
  'notebook': 9.99,
  'pencil': 1.70,
  'coffee': 3.00,
  'smoothie': 2.10,
};

function price({name}) {
  return prices[name];
}

// Original implementation of price function uses destructuring assignment
// {name}: This is a destructuring assignment, which extracts the name property 
// from the object passed as an argument to the price function. It allows 
// you to access the name property directly without needing to refer to the 
// entire object.

// For example:

// const item = { name: 'notebook' };
// console.log(price(item)); // Outputs: 9.99

// Alternative implementation of price function:
// function price(item) {
//   return prices[item.name];
// }

// Adding an item to the shopping cart.
// The amount is optional and defaults to 1.
// If the item is already in the cart, its amount is updated.

//function updateCart(name, amount) {     // Original implementation
//  amount = amount || 1;                 // Original implementation


function updateCart(name, amount = 1) {   // New implemenation
  let alreadyInCart = false;

  for (let i = 0; i < shoppingCart.length; i += 1) {
    let item = shoppingCart[i];

    if (item.name === name) {
      item.amount = amount;
      alreadyInCart = true;
      break;
    }
  }

  if (!alreadyInCart) {
    shoppingCart.push({ name, amount });
  }
}

// Calculating the price for the whole shopping cart.
function total() {
  let total = 0;

  for (let i = 0; i < shoppingCart.length; i += 1) {
    let item = shoppingCart[i];

    total += (item.amount * price(item));
  }

  return total.toFixed(2);
}

function pay() {
  // omitted

  console.log(`You have been charged $${total()}.`);
}

function checkout() {
  pay();
  shoppingCart = [];
}

// Example purchase.

updateCart('notebook');
updateCart('pencil', 2);
updateCart('coffee', 1);

// Oh wait, I don't need pencils
updateCart('pencil', 0);

checkout();
// You have been charged $14.69.

// Discussion:

// The problem was that one pencil remained in the shopping cart, although
// we intended to updat ehte quantity of pencils to 0 with updateCart('pencil', 
// 0).

// When we call updateCart, the amount passed in is 0. Since 0 is treated
// as falsy in JavaScript, amount || 1 returns 1. So every time we want to
// set the amount of some item to 0, it is set to 1 isntead.

// The new implementation uses a default parameter value to check whether
// the amount parameter's value is undefined. If so, amount is given a default
// value of 1.