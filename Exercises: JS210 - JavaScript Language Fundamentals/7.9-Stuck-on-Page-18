// The following code is a simplified (and not so serious) model of how we 
// read a software development book. But running this code results in a stack 
// overflow. What is wrong?

// Solution:

const totalPages = 364;
let energy = 100;
let currentPage = 1;      // New implementation

function read() {
//   let currentPage = 1; // Original implementation

  while (energy > 0 && currentPage < totalPages) {

    currentPage += 1;
    energy -= (5 + currentPage * 0.1);
  }

  console.log(`Made it to page ${String(currentPage)}.`);

  // Drink a cup of coffee.
  energy = 100;

  // Continue reading.
  if (currentPage < totalPages) {
    read();
  } else {
    console.log('Done!');
  }
}

read();

// Discussion:

// Notice that in the original implementation, within the function body, we 
// declare the varaible currentPage and assign it to 1. We increment
// currentPage within the while loop and then invoke read recursively if
// currentPage is still less than totalPages.

// The problem arises because each time read is executed, currentPage is
// assigned to 1. Therfore, the comparison provided as a condition to the
// if statement of the original implementation will always return true and
// read will continue to be invoked repeatedly until the stack overflows.

// To resolve this problem, we move the declaration and initial assignment
// of currentPage outside of the function body.