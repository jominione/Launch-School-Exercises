// What does the following code log? Why is this so?

let startingBalance = 1;
const chicken = 5;
const chickenQuantity = 7;

function totalPayable(item, quantity) {
  return startingBalance + (item * quantity);
}

startingBalance = 5;
console.log(totalPayable(chicken, chickenQuantity));

startingBalance = 10;
console.log(totalPayable(chicken, chickenQuantity));

// Will log 40 and 45.

// Closures are functions that 'retain access' to variables defined in an
// 'enclosing scope'.

// In code above, the enclosing scope is the global (window) scope containing
// the variables startingBalance, chicken, and chickenQuantity.

// Retaining access means that a variable's value is not fixed at the time
// when the function is defined or first executed. Instead, the variable's
// value is dynamically looked up each time the function is called.

// Therefore, the value of startingBalance on line 6 is not 1; instead, the
// value is a reference to the value stored in teh startingBalance variable
// in the global scope.

// As a result of how closures work, the first time the totalPayable function
// is called, the value of startingBalance is 5; the second time the function
// is called, the value of startingBalance is 10.