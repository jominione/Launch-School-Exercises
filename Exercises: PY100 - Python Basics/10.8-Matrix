# We wanted to create a matrix 3x3 so we could use it to build a Tic-Tac-Toe
# game. However, we encountered an issue, as whenever we change a value
# in one nested list, all nested lists are affected. Can you fix the code?

# sub_list = ["-", "-", "-"]
# matrix = []
# 
# for _ in range(3):
#     matrix.append(sub_list)
# 
# matrix[0][0] = "X"
# print(matrix)

# Solution:

sub_list = ["-", "-", "-"]
matrix = []

for _ in range(3):
    matrix.append(sub_list.copy())

matrix[0][0] = "X"
print(matrix)

# The original appends the same list object referenced by the sub_list variable
# to the matrix list. Consequently, any modification made to one sub-list
# impacts all the sub-lists, given that they essentially reference the same
# object.

# To tackle this issue, we can use the list.copy method, which generates
# a shallow copy of the list object. By doing so, the three nested sub-lists
# will individually reference distinct objects. As a result, modifications
# in one sub-list won't affect the others.