// P - Problem: Write a function that takes an array of numbers and returns 
// the sum of the sums of each leading subsequence in that array. Examine 
// the examples to see what we mean. You may assume that the array always 
// contains at least one number.

//  Explicit Requirements:
//   - Given an array of numbers and returns the sum of the sums of each 
//     leading subsequence in that array.
//   - Array always contains at least one number.

//  Implicit Requirements:
//   - Values are integers.

// E - Examples/Test Cases:

console.log(sumOfSums([3, 5, 2]));        // (3) + (3 + 5) + (3 + 5 + 2) --> 21
console.log(sumOfSums([1, 5, 7, 3]));     // (1) + (1 + 5) + (1 + 5 + 7) + (1 + 5 + 7 + 3) --> 36
console.log(sumOfSums([4]));              // 4
console.log(sumOfSums([1, 2, 3, 4, 5]));  // 35

// D - Data Structures: 
// - Input: Array
// - Output: integer
// - Intermediate: input -> nested array -> array -> output

// A - Algorithm:
// - initialise sum variable with value 0.
//   - outer loop is iteration of length of array.
//   - inner loop is sequence of actual value for that subsequence.
//     - add each val to sum.
// - return sum.

// C - Implementation/Implementing (a solution in Code):

function sumOfSums(nums) {
  let sum = 0;
  for (let i = 0; i < nums.length; i++) {
    for (let j = 0; j < nums.slice(0,i+1).length; j++) {
      sum += nums[j];
    }
  }
  return sum;
}

function sumOfSums2(nums) {
  let sumNums = nums.map( (val, idx) => nums.slice(0, idx+1)
                   .reduce( (sum, val) => sum + val ) )
                   .reduce( (sum, val) => sum + val );
  return sumNums;
}

console.log(sumOfSums2([3, 5, 2]));  