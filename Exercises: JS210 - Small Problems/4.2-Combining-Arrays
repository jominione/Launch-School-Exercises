// P - Problem: Write a function that takes two arrays as arguments and returns 
// an array containing the union of the values from the two. There should 
// be no duplication of values in the returned array, even if there are 
// duplicates in the original arrays. You may assume that both arguments will 
// always be arrays.

//  Explicit Requirements:
//   - Given two arrays as arguments and returns an array containing the union 
//     of the values from the two.
//   - There should be no duplication of values in the returned array, even 
//     if there are duplicates in the original arrays. 
//   - You may assume that both arguments will always be arrays.

//  Implicit Requirements:
//   - 

// E - Examples/Test Cases:

console.log(union([1, 3, 5], [3, 6, 9]));    // [1, 3, 5, 6, 9]

// D - Data Structures: 
// - Input: array
// - Output: array
// - Intermediate:

// A - Algorithm:
// - Concatenate first and second array.
// - Sort combined array.
// - Remove duplicates.
// - Return deduplicated array.

// C - Implementation/Implementing (a solution in Code):

function union(arr1, arr2) {
  let combined = arr1.concat(arr2);
  let deduplicated = combined.reduce((acc, val) => {
    if (!acc.includes(val)) acc.push(val);
    return acc;
  }, []);

  return deduplicated;
}

// Alternative solution using .forEach():

function copyNonDupsTo(resultArray, array) {
  array.forEach(value => {
    if (!resultArray.includes(value)) {
      resultArray.push(value);
    }
  });
}

function union(array1, array2) {
  const newArray = [];
  copyNonDupsTo(newArray, array1);
  copyNonDupsTo(newArray, array2);
  return newArray;
}

// General solution for indefinite number of arrays:

function copyNonDupsTo(resultArray, array) {
  array.forEach(value => {
    if (!resultArray.includes(value)) {
      resultArray.push(value);
    }
  });
}

function union(...args) {
  const newArray = [];

  args.forEach(value => copyNonDupsTo(newArray, value));

  return newArray;
}