// Problem:

// A triangle is classified as follows:

// - Right: One angle is a right angle (exactly 90 degrees).
// - Acute: All three angles are less than 90 degrees.
// - Obtuse: One angle is greater than 90 degrees.

// To be a valid triangle, the sum of the angles must be exactly 180 degrees, 
// and every angle must be greater than 0. If either of these conditions is 
// not satisfied, the triangle is invalid.

// Write a function that takes the three angles of a triangle as arguments 
// and returns one of the following four strings representing the triangle's 
// classification: 'right', 'acute', 'obtuse', or 'invalid'.

// You may assume that all angles have integer values, so you do not have 
// to worry about floating point errors. You may also assume that the arguments 
// are in degrees.


// Examples:

console.log(triangle(60, 70, 50));       // "acute"
console.log(triangle(30, 90, 60));       // "right"
console.log(triangle(120, 50, 10));      // "obtuse"
console.log(triangle(0, 90, 90));        // "invalid"
console.log(triangle(50, 50, 50));       // "invalid"

// Data Structure:

// Input: array of numbers;
// Output: string;
// Intermediate: input -> array -> boolean -> output.


// Algorithm:
// - Convert arguments into array.
// - Check if triangle is valid:
//   - Sum angles if equal to 180;
//   - Check if every angle is greater than 0;
// - Determine type of triangle:
//   - Check if every angle is less than 90;
//   - Check if one angle is exactly 90;
//   - Anything that gets to this point must be obtuse triangle.

// Implementation of Code:

function triangle(angle1, angle2, angle3) {
  let angles = [...arguments];
  if (angles[0] + angles[1] +angles[2] !== 180) return 'invalid';
  if (angles.some( angle => angle === 0)) return 'invalid';

  if (angles.every( angle => angle < 90 )) {
    return 'acute';
  } else if (angles.some( angle => angle === 90 )) {
    return "right";
  } else {
    return "obtuse";
  }
}