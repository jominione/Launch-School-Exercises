// P - Problem:

//  Explicit Requirements:
//   - 

//  Implicit Requirements:
//   - 

// E - Examples/Test Cases:

console.log(alphabeticNumberSort(
   [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));
// [8, 18, 11, 15, 5, 4, 14, 9, 19, 1, 7, 17, 6, 16, 10, 13, 3, 12, 2, 0]

// D - Data Structures: 
// - Input:
// - Output:
// - Intermediate:

// A - Algorithm:


// C - Implementation/Implementing (a solution in Code):

function alphabeticNumberSort(nums) {
  let str = 'zero, one, two, three, four, five, six, seven, eight, nine, ' + 
            'ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, ' + 
            'seventeen, eighteen, nineteen';
  
  const NUMBER_WORDS = str.split(', ');
  
  let map = NUMBER_WORDS.reduce( (acc, key, index) => {
    acc[key] = nums[index];
    return acc;
  }, {})

  let sortNumberWords = NUMBER_WORDS.sort();

  let sortNums = sortNumberWords.map( key => map[key] );

  return sortNums;

}