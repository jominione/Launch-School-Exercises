// P - Problem: Take the number 735291 and rotate it by one digit to the left, 
// getting 352917. Next, keep the first digit fixed in place and rotate the 
// remaining digits to get 329175. Keep the first two digits fixed in place 
// and rotate again to get 321759. Keep the first three digits fixed in place 
// and rotate again to get 321597. Finally, keep the first four digits fixed 
// in place and rotate the final two digits to get 321579. The resulting number 
// is called the maximum rotation of the original number.

// Write a function that takes an integer as an argument and returns the 
// maximum rotation of that integer. You can (and probably should) use the 
// rotateRightmostDigits function from the previous exercise.

// Explicit Requirements:
// - Given an integer as an argument and returns the maximum rotation of that 
//   integer. 

// Implicit Requirements:
// - Input is positive integer.


// Examples/Test Cases:

console.log(maxRotation(735291));          // 321579
console.log(maxRotation(3));               // 3
console.log(maxRotation(35));              // 53
console.log(maxRotation(105));             // 15 -- the leading zero gets dropped
console.log(maxRotation(8703529146));      // 7321609845

// Data Structure:
// Input: integer
// Output: integer
// Intermediate: input -> transform integer -> output


// Algorithm:
// - Use helper function rotateRightmostDigits from ex8.3.
// - Convert integer to string and determine length of string.
// - Using create helper function recursion, which iterate through string 
//   and transform return value using helper function rotateRightmostDigits.
// - Use the return value of helper function as input into next iteration.
// - Stop recursion after length - 1 iterations.
// - Convert back into integer.

// Implementing solution in Code:

function rotateString(str) {
  return str.slice(1) + str.slice(0, 1);
}

function rotateRightmostDigits(num, target) {
  let digits = String(num);
  let left = digits.slice(0, digits.length - target);
  let right = digits.slice(digits.length - target);
  let result = left + rotateString(right);
  return Number(result);
}

function maxRotation(num) {
  for (let i = String(num).length; i > 1; i--) {
    num = rotateRightmostDigits(num, i);
  }
  return num;
}