// P - Problem: Write a function that rotates an array by moving the first 
// element to the end of the array. Do not modify the original array.

// - If the input is not an array, return undefined.
// - If the input is an empty array, return an empty array.

// Review the test cases below, then implement the solution accordingly.


// Explicit Requirements:
// - Rotates an array by moving the first element to the end of the array. 
// - Do not modify the original array.
// - If the input is not an array, return undefined.
// - If the input is an empty array, return an empty array.

// Implicit Requirements:


// E - Examples/Tests:

console.log(rotateArray([7, 3, 5, 2, 9, 1]));       // [3, 5, 2, 9, 1, 7]
console.log(rotateArray(['a', 'b', 'c']));          // ["b", "c", "a"]
console.log(rotateArray(['a']));                    // ["a"]
console.log(rotateArray([1, 'a', 3, 'c']));         // ["a", 3, "c", 1]
console.log(rotateArray([{ a: 2 }, [1, 2], 3]));    // [[1, 2], 3, { a: 2 }]
console.log(rotateArray([]));                       // []

// return `undefined` if the argument is not an array
console.log(rotateArray());                         // undefined
console.log(rotateArray(1));                        // undefined


// the input array is not mutated
const array = [1, 2, 3, 4];
console.log(rotateArray(array));                    // [2, 3, 4, 1]
console.log(array);                                 // [1, 2, 3, 4]


// D - Data Structure:
// - Input: array or not array.
// - Output: array or undefined.
// - Intermediate: Input -> 

// A - Algorithm:
// - Check if input is array.
// - Check if input is empty array.
// - Create a new array from input array by dividing original array in two:
//   - left being first element of input.
//   - right being remaining element of input.
//   - new array left being put at end of right.


// C - Implementing solution in Code:

function rotateArray(arr) {
  if (!Array.isArray(arr)) return undefined;
  if (arr.length == 0) return [];
  return arr.slice(1).concat([arr[0]]);
}