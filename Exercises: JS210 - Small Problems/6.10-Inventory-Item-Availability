// P - Problem: Building on the previous exercise, write a function that 
// returns true or false based on whether or not an inventory item is 
// available. As before, the function takes two arguments: an inventory item 
// and a list of transactions. The function should return true only if the 
// sum of the quantity values of the item's transactions is greater than zero. 
// Notice that there is a movement property in each transaction object. A 
// movement value of 'out' will decrease the item's quantity.

// You may (and should) use the transactionsFor function from the previous 
// exercise.

//  Explicit Requirements:
//   - Given transactions array and item id, returns true or false based on 
//     whether or not an inventory item is available. 
//   - Should return true only if the sum of the quantity values of the item's 
//     transactions is greater than zero. 
//   - A movement value of 'out' will decrease the item's quantity.

//  Implicit Requirements:
//   - Quantity will sum of transactions where movement 'in' be addition
//     and 'out' subtraction.

// E - Examples/Test Cases:

const transactions = [ { id: 101, movement: 'in',  quantity:  5 },
                       { id: 105, movement: 'in',  quantity: 10 },
                       { id: 102, movement: 'out', quantity: 17 },
                       { id: 101, movement: 'in',  quantity: 12 },
                       { id: 103, movement: 'out', quantity: 15 },
                       { id: 102, movement: 'out', quantity: 15 },
                       { id: 105, movement: 'in',  quantity: 25 },
                       { id: 101, movement: 'out', quantity: 18 },
                       { id: 102, movement: 'in',  quantity: 22 },
                       { id: 103, movement: 'out', quantity: 15 }, ];

console.log(isItemAvailable(101, transactions));     // false
console.log(isItemAvailable(105, transactions));     // true

// D - Data Structures: 
// - Input: array of objects and integer
// - Output: boolean
// - Intermediate: array of objects

// A - Algorithm:
// - Use helper function from ex6.9 to filter transactions array.
// - Some the quantity for all the transactions in filtered array.
// - if over 0 return true and false otherwise.

// C - Implementation/Implementing (a solution in Code):

function transactionsFor(id, transactions) {
  return transactions.filter( transaction => transaction.id === id);
}

function isItemAvailable(id, transactions) {
  let filtered = transactionsFor(id, transactions);
  let sum = filtered.reduce((acc, transaction) => {
    if (transaction.movement === 'in') {
      acc += transaction.quantity;
    } else {
      acc -= transaction.quantity;
    }
    return acc;
  }, 0);

  return sum > 0;
}